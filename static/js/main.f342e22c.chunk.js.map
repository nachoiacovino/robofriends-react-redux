{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","containers/App.js","redux/actions.js","redux/constants.js","redux/reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","style","overflow","border","height","Header","memo","App","useState","filteredRobots","setFilteredRobots","dispatch","useDispatch","searchField","useSelector","searchRobots","requestRobots","isPending","useEffect","a","async","axios","get","res","payload","data","fetchData","filter","robot","toLowerCase","includes","e","target","value","initialStateSearch","initialStateRequest","logger","createLogger","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f342e22c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n        {robots.map((user, i) => \r\n            <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n            />\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input\r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = ({ children }) => {\r\n    return (\r\n        <div style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { memo } from 'react'\r\n\r\nconst Header = memo(() => {\r\n    return (\r\n        <h1 className='f1'>RoboFriends</h1>\r\n    )\r\n})\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './App.css'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport { setSearchField, setRequestRobots } from '../redux/actions'\nimport Header from '../components/Header'\n\nconst App = () => {\n\tconst [filteredRobots, setFilteredRobots] = useState([])\n\t\n\tconst dispatch = useDispatch()\n\tconst searchField = useSelector(({ searchRobots }) => searchRobots.searchField)\n\tconst robots = useSelector(({ requestRobots }) => requestRobots.robots)\n\tconst isPending = useSelector(({ requestRobots }) => requestRobots.isPending)\n\tconst error = useSelector(({ requestRobots }) => requestRobots.error)\n\t\n\tconst onSearchChange = e => dispatch(setSearchField(e.target.value))\n\n\tuseEffect(() => dispatch(setRequestRobots()), [dispatch])\n\tuseEffect(() => {\n\t\tsetFilteredRobots(\n\t\t\trobots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n\t\t)\n\t}, [robots, searchField])\n\n\treturn isPending\n\t\t? <h1>Loading</h1> \n\t\t:\t(\n\t\t\terror\n\t\t\t? <h1>There has been an error, please try again later. </h1>\n\t\t\t:\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t)\n}\n\nexport default App\n","import axios from 'axios'\r\nimport { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants'\r\n\r\nexport const setSearchField = payload => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload\r\n})\r\n\r\nexport const setRequestRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    const fetchData = async () => {\r\n        try {\r\n            const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: res.data })\r\n        } catch (error) {\r\n            dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n        }\r\n    }\r\n    fetchData()\r\n}\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\"\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\"\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\"\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\"","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, { type, payload }) => {\r\n    switch (type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRequest = {\r\n    isPending: true,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest, { type, payload }) => {\r\n    switch (type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: payload, isPending: false }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: payload, isPending: false }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport 'tachyons'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './containers/App'\nimport { searchRobots, requestRobots } from './redux/reducers'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n)\n\nserviceWorker.register()"],"sourceRoot":""}